AWSTemplateFormatVersion: 2010-09-09
Description: Companies API CloudFromation template
Parameters:
  prefix:
    Type: String
    Default: "gofit"
    Description: "Resource prefix to use when creating necessary objects"
    AllowedPattern: "^[a-z0-9][a-z0-9-]+$"
    ConstraintDescription: "Resource prefix can only contain lower-case letters, numbers, and dashes"
    MaxLength: 30
  envParameter: 
    Type: String
    Default: dev
    AllowedValues: [ dev, test, qa, prod ]
    Description: Suffix to be added for names.
Resources:
  # RestApi, authorizer and authorizer rol
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: The API resource
      Name: gofit-companies-api
  
  ApiGatewayAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerCredentials: !GetAtt 
        - ApiGatewayAuthorizerRole
        - Arn
      AuthorizerResultTtlInSeconds: 300
      AuthorizerUri: !Join 
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !ImportValue gofit-custom-authorizer-lambda
          - /invocations
      IdentitySource: method.request.header.Authorization
      Name: api-authorizer
      RestApiId: !Ref ApiGatewayRestApi
      Type: TOKEN

  ApiGatewayAuthorizerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:invokeFunction'
                Resource: !ImportValue gofit-custom-authorizer-lambda
  
  # /companies Resource
  ApiGatewayCompaniesResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt 
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: companies
  
  # /companies/{companyId} Resource
  ApiGatewayCompanyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayCompaniesResource
      PathPart: "{companyId}"

  # /companies/{companyId}/staff Resource
  ApiGatewayStaffResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayCompanyResource
      PathPart: staff

  # GET /companies/{companyID}
  ApiGatewayGetCompanyMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiGatewayLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayCompanyResource
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - Lambda
              - Arn
            - /invocations
      RequestParameters:
        method.request.header.Authorization: true

  # GET /companies
  ApiGatewayGetCompaniesMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiGatewayLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayCompaniesResource
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - Lambda
              - Arn
            - /invocations
      RequestParameters:
        method.request.header.Authorization: true
  
  # POST /companies
  ApiGatewayPostCompanyMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiGatewayLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayCompaniesResource
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - Lambda
              - Arn
            - /invocations
      RequestParameters:
        method.request.header.Authorization: true

  # POST /companies/{companyID}/staff
  ApiGatewayPostStaffMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: ApiGatewayLambdaPermission
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayStaffResource
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - Lambda
              - Arn
            - /invocations
      RequestParameters:
        method.request.header.Authorization: true

  # Deployment of Development Stage
  ApiGatewatDeployment:
    DependsOn:
      - ApiGatewayPostCompanyMethod
      - ApiGatewayGetCompanyMethod
      - ApiGatewayGetCompaniesMethod
      - ApiGatewayPostStaffMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: Development Stage
      StageName: Development
  
  # Lambda Permission: Gives permition to the api gateway to excecute the Lambda Function
  ApiGatewayLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - Lambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*

  # Lambda backend (golang lambda)
  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: GoFitCompaniesApi
      Code:
        S3Bucket: !Sub ${prefix}-lambda-functions
        S3Key: companies-lambda.zip
      Handler: main
      MemorySize: 128
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: go1.x
      Timeout: 60
  # Lambda Rol: The rol associated to the Lambda function
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName:
            'Fn::Join':
              - '-'
              - - Ref: 'AWS::StackName'
                - companiesTablePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - Ref: 'AWS::Region'
                      - ':'
                      - Ref: 'AWS::AccountId'
                      - ':table/'
                      - Ref: companiesTable
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName:
            'Fn::Join':
              - '-'
              - - Ref: 'AWS::StackName'
                - companiesGSIPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - Ref: 'AWS::Region'
                      - ':'
                      - Ref: 'AWS::AccountId'
                      - ':table/'
                      - Ref: companiesTable
                      - '/index/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  
  # Database DynamoDB
  companiesTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "CompanyID"
          AttributeType: "S"
        - 
          AttributeName: "SortKey"
          AttributeType: "S"
        - 
          AttributeName: "UserSub"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "CompanyID"
          KeyType: "HASH"
        - 
          AttributeName: "SortKey"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Companies"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "companiesUserSubGSI"
          KeySchema: 
            - 
              AttributeName: "UserSub"
              KeyType: "HASH"
            - 
              AttributeName: "SortKey"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
  
Outputs:
  AwsAccountId:
    Value: !Ref 'AWS::AccountId'
    Description: Account ID of the AWS account
  AwsRegion:
    Value: !Ref 'AWS::Region'
    Description: Region of the AWS deployment
  ApiGatewayRestApi:
    Value: !Ref ApiGatewayRestApi
    Description: Name of the ApiGatewayRestApi
